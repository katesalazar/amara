comment   `hello, world` program in minia language.
comment ends

comment   Comments are a very important feature. They can span
        across many lines.
comment ends

comment
    Functions are a core component in any programming language.
    The subroutine is an invention attributed to David J. Wheeler, as
  told by Bjarne Stroustrup, which was a student working under his
  supervision.
comment ends
function identifier main identifier ends

	comment
	    Tagging a function as `command line interface application
	  function` unlocks some features, like access to printing lines
	  to the console, or reading user input from it.
	comment ends
	is a command line interface application function

	comment
	    Functions transform input values into output values, as in
	  math and as in any other programming language.
	comment ends
	and receives nothing at all
	and returns nothing at all

	comment
	    In the minia language it is mandatory to declare whether a
	  function is going to be pure or conversely it is going to be
	  allowed to have side effects. So the engine is allowed to deny
	  side effects to functions not correctly explicitly declared as
	  causing them.
	comment ends
	so it causes side effects

	comment
	    By the way this function receives nothing at all and returns
	  nothing at all, so arguably it should only be allowed if it
	  causes side effects.
	comment ends

	comment   This is the line which separates function heading
	 * declarations from the function implementation, i.e. _the
	 * code_. comment ends
	 and executes statements sequentially
	and does

	comment   This is an operation. Function bodies are composed of
	 * operations, such as `print` or `new line`. Operations can
	 * be composed of expressions. For instance, the `print`
	 * operation needs and accepts exactly one argument. comment ends
	print string literal hello, world string literal ends

	comment   Operations joined using the `and then` conjunction are
	 * executed strictly sequentially. Up to five operations can
	 * be sequenced in a single function. comment ends
	and then new line

	comment   If this function returned something, the last operation had
	 * to be a _return_ _operation_. But that's not the case. comment ends

	comment   After the function operations and before the function end,
	 * there can optionally be binding declarations, but here there
	 * are none. comment ends

comment   End the function scope in a similar way as traditional scope ending
 * in other languages would do in Algol, Pascal, etc. comment ends
end function identifier main identifier ends

comment   Applications describe functions that can be called from outside the
 * language. comment ends
application identifier hello, world identifier ends

	comment   Tagging an application as `command line interface
	 * application` unlocks the possibility of running _command line
	 * interface application functions_. comment ends
	is a command line interface application

	comment   The entry point function name is explicit. comment ends
	and the entry point is function identifier main identifier ends
end application identifier hello, world identifier ends

comment   An execution request must be processed by the language processor
 * as triggering a run of the chosen application. comment ends
run command line interface application identifier hello, world identifier ends
